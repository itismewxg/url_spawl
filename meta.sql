-- version recorded as committed/published out
CREATE SCHEMA IF NOT EXISTS metastore_4;
CREATE TABLE IF NOT EXISTS metastore_4.committed_storage_versions (
    table_name varchar(128) NOT NULL,
    version integer NOT NULL,
    cumulative_version_hash bigint NOT NULL,
    PRIMARY KEY (table_name)
);

-- storage server meta, how does the table distributed in the servers and its tiers
CREATE TABLE IF NOT EXISTS metastore_4.storage_servers (
    host varchar(128) NOT NULL,
    port integer NOT NULL,
    table_name varchar(128) NOT NULL,
    tier integer NOT NULL,
    PRIMARY KEY (table_name, host, port)
);

-- loader updater each storage accepted the version or not
CREATE TABLE IF NOT EXISTS metastore_4.storage_server_state (
    host varchar(128) NOT NULL,
    port integer NOT NULL,
    table_name varchar(128) NOT NULL,
    version integer NOT NULL,
    cumulative_version_hash bigint NOT NULL,
    state integer NOT NULL, -- accept/not accepted
    modify_time timestamp NOT NULL,
    PRIMARY KEY (table_name, host, port)
);

-- 'updater_state_id' is the references 'id' in this table
CREATE TABLE  IF NOT EXISTS metastore_4.updater_state (
    id bigserial,
    state integer NOT NULL, -- 0 init, 3 ready, 4 commit
    updater_identifier varchar(128) NOT NULL,
    modify_time timestamp NOT NULL DEFAULT current_timestamp,
    PRIMARY KEY (id)
);

-- version history generated by updater
CREATE TABLE  IF NOT EXISTS metastore_4.storage_version_history (
    id bigserial NOT NULL,
    table_name varchar(128) NOT NULL,
    version integer NOT NULL,
    version_hash bigint NOT NULL,
    cumulative_version_hash bigint NOT NULL,
    start_offset bigint NOT NULL,
    end_offset bigint NOT NULL,
    earlist_tstamp bigint NOT NULL,
    latest_tstamp bigint NOT NULL,
    file_path varchar(512),
    updater_state_id integer NOT NULL,
    create_time timestamp NOT NULL DEFAULT current_timestamp,
    PRIMARY KEY (id),
    UNIQUE (table_name, version, version_hash),
    FOREIGN KEY (updater_state_id) REFERENCES metastore_4.updater_state (id)
);
